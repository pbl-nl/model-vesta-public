//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container EnergiePrijzen
{
	template GebruiksSectie
	{
		// begin case parameters
		unit<uint32>      table;
		parameter<string> code;
		// end case parameters

		attribute<Eur_GJ> distr_tr         (table) := ='(table/'+code+'_PC_DIS[Eur_per_eenheid] + table/'+code+'_PC_TRANS[Eur_per_eenheid]) * OmrekenFactor * InflationFactor';
		attribute<Eur_GJ> netwerk          (table) := ='table/'+code+'_PC_NET[Eur_per_eenheid] * OmrekenFactor * InflationFactor';
		attribute<Eur_GJ> CommodityPrice   (table) := ='table/'+code+'_PC_COM_EXCL_CO2[Eur_per_eenheid] * OmrekenFactor * InflationFactor';

		attribute<Eur_GJ> CO2Heffing       (table) := =
			'table/'+ code+ '_PC_CO2[Eur_per_eenheid] * OmrekenFactor * InflationFactor' + ' + (DefaultInstellingen/Basis/Beleid/Extra_CO2_heffing / 1000 [kg / ton]) * OmrekenFactor * table/RAT_CO2_KWH[kg_per_eenheid]' ;

		attribute<Eur_GJ> EnergieHeffing   (table) := ='(table/'+code+'_PC_BEL_EL[Eur_per_eenheid] + table/'+code+'_PC_SDE[Eur_per_eenheid]) * OmrekenFactor * InflationFactor';

		attribute<Eur_GJ> Maatschappelijk  (table) := CommodityPrice + CO2Heffing + netwerk;
		attribute<Eur_GJ> eindgebruik_excl (table) := Maatschappelijk + EnergieHeffing;
	}

	template ImportElekGas
	{
		// begin case parameters
		parameter<string>     FileName;
		unit<float64>         model_eenheid;
		unit<float64>         eenheid_GJ;
		parameter<eenheid_GJ> OmrekenFactor;
		parameter<_yr>        AnnualPriceInflationFactor;
		parameter<string>     GlastuinbouwExpr;
		// end case parameters

		unit<float64> Eur_per_eenheid := units/Eur / model_eenheid;
		unit<float64> kg_per_eenheid  := units/kg  / model_eenheid;

		unit<uint32> table
		:	StorageName     = "='%EnergieDataProjDir%/'+ FileName + '.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "All";

		container Results
		{
			attribute<yr_uint16> Jaar            (table) := table/Jaar[yr_uint16 ];
			attribute<ratio>     InflationFactor (table) := exp(float64(Jaar - 2010[yr_uint16]) * AnnualPriceInflationFactor);
			attribute<kg_GJ>     CO2_GJ          (table) := table/RAT_CO2_KWH[KG / model_eenheid] * OmrekenFactor;
			
			container Teruglevering
			{
				parameter<string> code := 'TL';

				attribute<Eur_GJ> distr_tr         (table) := const(0[Eur_GJ], table);
				attribute<Eur_GJ> netwerk          (table) := const(0[Eur_GJ], table);
				attribute<Eur_GJ> CommodityPrice   (table) := KleinGebruik/CommodityPrice;
				attribute<Eur_GJ> CO2Heffing       (table) := const(0[Eur_GJ], table);
				attribute<Eur_GJ> EnergieHeffing   (table) := const(0[Eur_GJ], table);

				attribute<Eur_GJ> Maatschappelijk  (table) := CommodityPrice + CO2Heffing + netwerk;
				attribute<Eur_GJ> eindgebruik_excl (table) := Maatschappelijk + EnergieHeffing;
			}

			container KleinGebruik        := GebruiksSectie(table, 'KG');
			container KleinMiddelGebruik  := GebruiksSectie(table, 'KMG');
			container MiddelMiddelGebruik := GebruiksSectie(table, 'MMG');
			container GrootGebruik        := GebruiksSectie(table, 'GG');
			container GlasTuinBouw        := =GlastuinbouwExpr;
		}
	}

	template ImportOverig
	{
		// begin case parameters
		parameter<string> FileName;
		parameter<_yr>    AnnualPriceInflationFactor;
		// end case parameters

		unit<uint32> table
		:	StorageName     = "='%EnergieDataProjDir%/'+ FileName + '.csv'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "All";

		container Results
		{
			attribute<yr_uint16> Jaar            (table) := table/Jaar[yr_uint16];
			attribute<ratio>     InflationFactor (table) := exp(float64(Jaar - 2010[yr_uint16]) * AnnualPriceInflationFactor);
			attribute<Eur_GJ>    BioMassa        (table) := table/KGJ_BioMassa   [Eur_GJ] * InflationFactor;
			attribute<Eur_GJ>    Pellets         (table) := table/KGJ_Pellets    [Eur_GJ] * InflationFactor;
			attribute<Eur_GJ>    Kolen_Excl      (table) := table/KGJ_Kolen_Excl [Eur_GJ] * InflationFactor;
			attribute<Eur_GJ>    Kolen_CO2       (table) := table/KGJ_Kolen_CO2  [Eur_GJ] * InflationFactor;
			attribute<Eur_GJ>    Waterstof       (table) := (H2mix/K_kg / Kengetallen/H2kentallen/H2energie_onder) * 1000[mj / gj];
			
			container H2mix
			{
				attribute<Eur_KG> K_H2_bla (table) := table/EurKG_H2_B[Eur_KG] * InflationFactor;
				attribute<Eur_KG> K_H2_gro (table) := table/EurKG_H2_G[Eur_KG] * InflationFactor;
				attribute<ratio>  R_groen  (table) := table/R_groen [ratio];
				attribute<ratio>  R_blauw  (table) := table/R_blauw [ratio];
				attribute<Eur_KG> K_kg     (table) := K_H2_bla * R_blauw + K_H2_gro * R_groen, IntegrityCheck = "(R_groen + R_blauw) == 1.0[ratio]";
			}
		}
	}

	template All
	{
		// begin case parameters
		parameter<string> FileName;
		parameter<_yr>    AnnualPriceInflationFactor;
		// end case parameters

		parameter<string> GXXexpr := SharedInvoer/G03_aan ? '_GAlaag' : SharedInvoer/G04_aan ? '_GAhoog' : '';

		container Elektriciteit := ImportElekGas(
			 FileName + GXXexpr +'_Elek'
			,kWh
			,kWh / GJ
			,value(1000000.0 / 3600.0, kWh / GJ)
			,AnnualPriceInflationFactor
			,'GrootGebruik'
		);
		
		container GroeneElektriciteit := ImportElekGas(
			 FileName + GXXexpr +'_GroenElek'
			,kWh
			,kWh / GJ
			,value(1000000.0 / 3600.0, kWh / GJ)
			,AnnualPriceInflationFactor
			,'GrootGebruik'
		);

		container AardGas := ImportElekGas(
			 FileName + GXXexpr + '_AardGas'
			,m3
			,m3 / GJ
			,1.0 / Kengetallen/constanten/GasEnergie
			,AnnualPriceInflationFactor
			,'GebruiksSectie(table, ''GLAST'')'
		);
		
		container KlimaatneutraalGas := ImportElekGas(
			 FileName + GXXexpr + '_KlimaatneutraalGas'
			,m3
			,m3 / GJ
			,1.0 / Kengetallen/constanten/GasEnergie
			,AnnualPriceInflationFactor
			,'GebruiksSectie(table, ''GLAST'')' );

		container Overig := ImportOverig (FileName + '_OverigeKosten' + GXXexpr, AnnualPriceInflationFactor);
	}
}