//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

template StartingStateComponent
{
	// begin case parameters
	unit<uint32> BebouwingsObjectSrc;
	unit<uint32> ModelObject;
	parameter<Classifications/BebouwingsComponent> BebouwingsComponent_rel;
	// end case parameters

	unit<uint32>  results := BebouwingsObjectSrc
	{
		// =============== ongewijzigde attributen uniform voor alle BC
		attribute<Invoer/SpecifiekeInstellingen/PlanRegio> PlanRegio_rel   := BebouwingsObjectSrc/buurt_rel;
		attribute<ModelObject>                             ModelObject_rel := rlookup(BebouwingsObjectSrc/ModelObjectKey, ModelObject/ModelObjectKey);

		// =============== attributen die per Rekenstap kunnen wijzigen door toepassing van GebouwOpties
		attribute<Classifications/SchilLabel>  SchilLabel_rel := =(BebouwingsComponent_rel == Classifications/BebouwingsComponent/V/BestaandeWoning) ?
				'MakeDefined(BebouwingsObjectSrc/SchilLabel_rel, Classifications/schillabel/V/N)' :
				'MakeDefined(BebouwingsObjectSrc/SchilLabel_rel, ModelObject/SchilLabel_rel[ ModelObject_rel])';
	
		attribute<Classifications/GebouwOptie> GebouwOptie_rel := ModelObject/StartOptie_rel[ModelObject_rel]; // laast toegepaste optie
		container InstallatiePerProduct := for_each_nedv(Classifications/Product/name
			, 'Classifications/GebouwOptie/PerProduct/'+Classifications/Product/name+'[GebouwOptie_rel]'
			, .
			, Classifications/Installatie
		);
		
		container Performance_key1 := for_each_nedv(Classifications/Product/name
			, 'Classifications/Installatie/name[InstallatiePerProduct/'+Classifications/Product/name+']+''.'' + Classifications/SchilLabel/name[SchilLabel_rel] + ''.' + Classifications/Product/TypeName+''''
			, .
			, string
		), isHidden = "True";

		container Performance_key2 := for_each_nedv(Classifications/Product/name
			, 'Classifications/Installatie/name[InstallatiePerProduct/'+Classifications/Product/name+']+''.x.' + Classifications/Product/TypeName+''''
			,.
			, string
		), isHidden = "True";

		container PerformancePerProduct := for_each_nedv(Classifications/Product/name
			,	replace(
					'MakeDefined('
						'rlookup(Performance_key1/@P, Classifications/Performance/code), '
						'rlookup(Performance_key2/@P, Classifications/Performance/code),'
						'rlookup(''geen.x.x'', Classifications/Performance/code)'
					')'
				, '@P', Classifications/Product/name)
			, .
			, Classifications/Performance
		);

		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_init := const(Classifications/AfgifteSysteem/V/MTAS, .);
		attribute<Classifications/AfgifteSysteem> AfgifteSysteem_rel  := max_elem(
			 AfgifteSysteem_init
			,Classifications/Performance/AfgifteSysteem_rel[PerformancePerProduct/RVb]
			,Classifications/Performance/AfgifteSysteem_rel[PerformancePerProduct/RVp]
		);

		container OpwekkingsOpties
		{
			container capaciteit
			{
				attribute<ratio> Zon_PV      (results) := const(0[ratio], results);
				attribute<ratio> ZonneBoiler (results) := const(0[ratio], results);
				attribute<ratio> EWV         (results) := const(0[ratio], results);
				attribute<ratio> mWKK        (results) := const(0[ratio], results);
				attribute<ratio> hWP         (results) := const(0[ratio], results);
			}
		}

		container Kapitaallasten
		{
			//Aansluitbijdrages
			attribute<Eur_yr> Kji_Asl_Enet (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi_Asl_Enet (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kji_Asl_Gnet (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi_Asl_Gnet (results) := const(0[Eur_yr], results);

			//Investeringen
			attribute<Eur_yr> Kji30_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi30_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kji20_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi20_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kji15_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi15_LO (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kji_gv   (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi_gv   (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kj_gv_incentive (results) := const(0[Eur_yr], results);

			attribute<Eur_yr> Kji_LTAS (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Kmi_LTAS (results) := const(0[Eur_yr], results);

			//Subsidies
			attribute<Eur_yr> Oji_s_LO_30 (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Oji_s_LO_20 (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Oji_s_LO_15 (results) := const(0[Eur_yr], results);
			attribute<Eur_yr> Oji_s_gv    (results) := const(0[Eur_yr], results);			
		}

		// =============== attributen die ook per GebiedOptie kunnen wijzigen
		attribute<Classifications/WarmteOptie> WarmteOptie_rel := Classifications/GebouwOptie/WarmteOptie_rel [ GebouwOptie_rel ];

		unit<uint32> AfnameGebied := ..../AfnameGebied;
		attribute<AfnameGebied> AfnameGebied_rel := const((0 / 0)[AfnameGebied], results);
	}
}
