//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                   (C) VESTA 2020 - Planbureau voor de Leefomgeving                   //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

container Prijzen
{
	container AardGas
	{
		unit<uint32> TabelAG := Invoer/EnergiePrijzen/AardGas/Table;
		container bronAG     := Invoer/EnergiePrijzen/AardGas/results;
		
		unit<uint32> TabelKG := Invoer/EnergiePrijzen/KlimaatneutraalGas/Table;
		container bronKG     := Invoer/EnergiePrijzen/KlimaatneutraalGas/results;
		
		parameter<TabelAG> JaarIndexAG := classify(RekenJaar_jaar, bronAG/Jaar);
		parameter<TabelKG> JaarIndexKG := classify(RekenJaar_jaar, bronKG/Jaar);
		
		parameter<kg_GJ> CO2_GJ    := bronAG/CO2_GJ[JaarIndexAG] * Voorkeuren/AardGasCO2Factor,
			IntegrityCheck = "bronKG/CO2_GJ[JaarIndexKG] * Voorkeuren/KlimaatneutraalGasFactor == 0[kg_GJ]";
		parameter<Float64>  KlimaatneutraalGasFactor:= Voorkeuren/KlimaatneutraalGasFactor;
		parameter<Float64>  GrijsGasFactor:= 1.0 - KlimaatneutraalGasFactor;
		
		unit<uint8> Staffel := classifications/gebruiksgrootteklasse 
		{
			attribute<GJ_yr>  ClassBreak := gas_break;
			attribute<Eur_GJ> KGJ_Commodity        := ='union_data(., ' + AsItemList('bronAG/' + name + '/CommodityPrice  [JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/CommodityPrice  [JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
			attribute<Eur_GJ> KGJ_netwerk          := ='union_data(., ' + AsItemList('bronAG/' + name + '/netwerk         [JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/netwerk         [JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
			attribute<Eur_GJ> KGJ_eindgebruik_excl := ='union_data(., ' + AsItemList('bronAG/' + name + '/eindgebruik_excl[JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/eindgebruik_excl[JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
			attribute<Eur_GJ> KGJ_Maatschappelijk  := ='union_data(., ' + AsItemList('bronAG/' + name + '/Maatschappelijk [JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/Maatschappelijk [JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
			attribute<Eur_GJ> KGJ_EnergieHeffing   := ='union_data(., ' + AsItemList('bronAG/' + name + '/EnergieHeffing  [JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/EnergieHeffing  [JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
			attribute<Eur_GJ> KGJ_CO2Heffing       := ='union_data(., ' + AsItemList('bronAG/' + name + '/CO2Heffing      [JaarIndexAG] * GrijsGasFactor + bronKG/' + name + '/CO2Heffing      [JaarIndexKG] * KlimaatneutraalGasFactor') + ')';
		}

		unit<uint8>  Glastuinbouw : nrofrows = 1
		{
			attribute<GJ_yr>  ClassBreak           := union_data(., first(staffel/Classbreak));
			attribute<Eur_GJ> KGJ_eindgebruik_excl := bronAG/Glastuinbouw/eindgebruik_excl[const(JaarIndexAG,.)] * GrijsGasFactor + bronKG/Glastuinbouw/eindgebruik_excl[const(JaarIndexKG,.)] * KlimaatneutraalGasFactor;
			attribute<Eur_GJ> KGJ_Maatschappelijk  := bronAG/Glastuinbouw/Maatschappelijk [const(JaarIndexAG,.)] * GrijsGasFactor + bronKG/Glastuinbouw/Maatschappelijk [const(JaarIndexKG,.)] * KlimaatneutraalGasFactor;
			attribute<Eur_GJ> KGJ_netwerk          := bronAG/Glastuinbouw/netwerk         [const(JaarIndexAG,.)] * GrijsGasFactor + bronKG/Glastuinbouw/netwerk         [const(JaarIndexKG,.)] * KlimaatneutraalGasFactor;
			attribute<Eur_GJ> KGJ_EnergieHeffing   := bronAG/Glastuinbouw/EnergieHeffing  [const(JaarIndexAG,.)] * GrijsGasFactor + bronKG/Glastuinbouw/EnergieHeffing  [const(JaarIndexKG,.)] * KlimaatneutraalGasFactor;
			attribute<Eur_GJ> KGJ_CO2Heffing       := bronAG/Glastuinbouw/CO2Heffing      [const(JaarIndexAG,.)] * GrijsGasFactor + bronKG/Glastuinbouw/CO2Heffing      [const(JaarIndexKG,.)] * KlimaatneutraalGasFactor;
		}

		container Bijstook
		{
			parameter<Eur_GJ> KGJ_eindgebruik_excl := bronAG/GrootGebruik/eindgebruik_excl[JaarIndexAG] * GrijsGasFactor + bronKG/GrootGebruik/eindgebruik_excl[JaarIndexKG] * KlimaatneutraalGasFactor;
			parameter<Eur_GJ> KGJ_Maatschappelijk  := bronAG/GrootGebruik/Maatschappelijk [JaarIndexAG] * GrijsGasFactor + bronKG/GrootGebruik/Maatschappelijk [JaarIndexKG] * KlimaatneutraalGasFactor;
			parameter<Eur_GJ> KGJ_netwerk          := bronAG/GrootGebruik/netwerk         [JaarIndexAG] * GrijsGasFactor + bronKG/GrootGebruik/netwerk         [JaarIndexKG] * KlimaatneutraalGasFactor;
			parameter<Eur_GJ> KGJ_EnergieHeffing   := bronAG/GrootGebruik/EnergieHeffing  [JaarIndexAG] * GrijsGasFactor + bronKG/GrootGebruik/EnergieHeffing  [JaarIndexKG] * KlimaatneutraalGasFactor;
			parameter<Eur_GJ> KGJ_CO2Heffing       := bronAG/GrootGebruik/CO2Heffing      [JaarIndexAG] * GrijsGasFactor + bronKG/GrootGebruik/CO2Heffing      [JaarIndexKG] * KlimaatneutraalGasFactor;
		}
	}

	container Elektriciteit
	{
		unit<uint32> TabelGrijs := Invoer/EnergiePrijzen/Elektriciteit/Table;
		container    bronGrijs  := Invoer/EnergiePrijzen/Elektriciteit/results;
		
		unit<uint32> TabelGroen := Invoer/EnergiePrijzen/GroeneElektriciteit/Table;
		container    bronGroen  := Invoer/EnergiePrijzen/GroeneElektriciteit/results;

		parameter<TabelGrijs> JaarIndexGrijs := classify(RekenJaar_jaar, bronGrijs/Jaar);
		parameter<TabelGroen> JaarIndexGroen := classify(RekenJaar_jaar, bronGroen/Jaar);
		
		parameter<kg_GJ> CO2_GJ    := bronGrijs/CO2_GJ[JaarIndexGrijs] * Voorkeuren/ElektriciteitCO2Factor,
			IntegrityCheck = "bronGroen/CO2_GJ[JaarIndexGroen] * (1.0 - Voorkeuren/ElektriciteitCO2Factor) == 0[kg_GJ]";
			
		parameter<Float64>  GroenElekFactor:= 1.0 - GrijsElekFactor;
		parameter<Float64>  GrijsElekFactor:= Voorkeuren/ElektriciteitCO2Factor;

		unit<uint8> Staffel := classifications/gebruiksgrootteklasse
		{
			attribute<GJ_yr>  ClassBreak           := elek_break_kWh [GJ_yr];		
			attribute<Eur_GJ> KGJ_Commodity        := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/CommodityPrice  [JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/CommodityPrice  [JaarIndexGroen] * GroenElekFactor') + ')';
			attribute<Eur_GJ> KGJ_netwerk          := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/netwerk         [JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/netwerk         [JaarIndexGroen] * GroenElekFactor') + ')';
			attribute<Eur_GJ> KGJ_eindgebruik_excl := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/eindgebruik_excl[JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/eindgebruik_excl[JaarIndexGroen] * GroenElekFactor') + ')';
			attribute<Eur_GJ> KGJ_Maatschappelijk  := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/Maatschappelijk [JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/Maatschappelijk [JaarIndexGroen] * GroenElekFactor') + ')';
			attribute<Eur_GJ> KGJ_EnergieHeffing   := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/EnergieHeffing  [JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/EnergieHeffing  [JaarIndexGroen] * GroenElekFactor') + ')';
			attribute<Eur_GJ> KGJ_CO2Heffing       := ='union_data(., ' + AsItemList('bronGrijs/' + name + '/CO2Heffing      [JaarIndexGrijs] * GrijsElekFactor + bronGroen/' + name + '/CO2Heffing      [JaarIndexGroen] * GroenElekFactor') + ')';
		}
	}
	
	container overig
	{
		container bron := Invoer/EnergiePrijzen/Overig/results;

		parameter<Eur_GJ> Pj_biomassa := bron/Biomassa [rlookup(RekenJaar_jaar, bron/jaar)];
		parameter<Eur_GJ> Pj_pellets  := bron/Pellets  [rlookup(RekenJaar_jaar, bron/jaar)];
		parameter<Eur_GJ> Pj_H2       := bron/Waterstof[rlookup(RekenJaar_jaar, bron/jaar)];

		parameter<Eur_GJ> Pm_biomassa := Pj_biomassa;
		parameter<Eur_GJ> Pm_pellets  := Pj_pellets;
	}
}